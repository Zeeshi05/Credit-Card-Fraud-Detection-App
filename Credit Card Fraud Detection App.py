# -*- coding: utf-8 -*-
"""Untitled61.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyb-AtLHLi-2JBXuRp0L6qsuvFyDtxxh
"""

!pip install gradio

# Credit Card Fraud Detection App with Gradio

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import gradio as gr

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report, confusion_matrix

# Load Dataset
df = pd.read_csv("creditcard.csv")  # Ensure this file is in the working directory

# Feature Engineering
scaler = StandardScaler()
df['scaled_amount'] = scaler.fit_transform(df['Amount'].values.reshape(-1, 1))
df['scaled_time'] = scaler.fit_transform(df['Time'].values.reshape(-1, 1))
df.drop(['Time', 'Amount'], axis=1, inplace=True)
df = df.rename(columns={"scaled_amount": "Amount", "scaled_time": "Time"})

# Features and Labels
X = df.drop("Class", axis=1)
y = df["Class"]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Isolation Forest for Anomaly Detection
model = IsolationForest(n_estimators=100, contamination=float(y.sum()) / len(y), random_state=42)
model.fit(X_train)

# Predict Anomalies
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Convert -1 to 1 (fraud), 1 to 0 (normal)
y_pred_train = np.where(y_pred_train == -1, 1, 0)
y_pred_test = np.where(y_pred_test == -1, 1, 0)

print("Training Classification Report:")
print(classification_report(y_train, y_pred_train))

print("Testing Classification Report:")
print(classification_report(y_test, y_pred_test))

# Gradio Interface

def detect_fraud(time, amount, *features):
    data = np.array([[time, amount] + list(features)])
    scaled_data = scaler.transform(np.array([[amount]]))
    data[0, 1] = scaled_data[0, 0]  # Replace amount with scaled
    time_scaled = scaler.transform(np.array([[time]]))
    data[0, 0] = time_scaled[0, 0]  # Replace time with scaled

    columns = X.columns
    input_df = pd.DataFrame(data, columns=columns)
    pred = model.predict(input_df)[0]
    return "Fraudulent" if pred == -1 else "Legitimate"

# Define input interface
inputs = [
    gr.Number(label="Time"),
    gr.Number(label="Amount")
]

# Add PCA features V1 to V28
for i in range(1, 29):
    inputs.append(gr.Number(label=f"V{i}"))

interface = gr.Interface(
    fn=detect_fraud,
    inputs=inputs,
    outputs="text",
    title="Credit Card Transaction Fraud Detector",
    description="Enter the features of a credit card transaction to detect if it's fraudulent or not."
)

interface.launch()

example_input = [
    100000,
    149.62,
    -1.359807134,
    -0.072781173,
    2.536346738,
    1.378155224,
    -0.33832077,
    0.462387778,
    0.239598554,
    0.098697901,
    0.36378697,
    0.090794172,
    -0.551599533,
    -0.617800856,
    -0.991389847,
    -0.311169354,
    1.468176972,
    -0.470400525,
    0.207971242,
    0.02579058,
    0.40399296,
    0.2514121,
    -0.018306778,
    0.277837576,
    -0.11047391,
    0.066928075,
    0.128539358,
    -0.189114844,
    0.133558377,
    -0.02105305
]

# Gradio Interface
interface = gr.Interface(
    fn=detect_fraud,
    inputs=inputs,
    outputs="text",
    title="Credit Card Transaction Fraud Detector",
    description="Enter transaction details to detect fraud. Use the example below to auto-fill fields.",
    examples=[example_input]
)

interface.launch()